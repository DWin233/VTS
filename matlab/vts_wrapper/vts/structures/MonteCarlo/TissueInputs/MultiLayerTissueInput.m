% MULTILAYERTISSUEINPUT Defines the input data for multi-layer tissue
classdef MultiLayerTissueInput < handle % deriving from handle allows us to keep a singleton around (reference based) - see Doug's post here: http://www.mathworks.com/matlabcentral/newsreader/view_thread/171344
    properties
        LayerRegions = struct(...
            'ZRange',{...
                [-Inf, 0], ...
                [0, 100], ...
                [100, +Inf]}, ...
            'RegionOP',{...
                [0.0, 1e-10, 1.0, 1.0], ...
                [0.0, 1.0, 0.8, 1.4], ...
                [0.0, 1e-10, 1.0, 1.0]  }, ...
            'PhaseFunctionKey', {...
                'HenyeyGreensteinKey1',... 
                'HenyeyGreensteinKey2',...
                'HenyeyGreensteinKey3'}...
            );
%        RegionPhaseFunctionInputs = 'RegionPhaseFunctionInputs';
         RegionPhaseFunctionInputs = containers.Map({'HenyeyGreensteinKey1','HenyeyGreensteinKey2','HenyeyGreensteinKey3'},...
            {HenyeyGreensteinPhaseFunctionInput,HenyeyGreensteinPhaseFunctionInput,HenyeyGreensteinPhaseFunctionInput});
    end
    
    methods (Static)
        function input = FromInputNET(inputNET)
            input = MultiLayerTissueInput;
            input.RegionPhaseFunctionInputs = inputNET.RegionPhaseFunctionInputs;
            regionNET = inputNET.Regions;
            for i=1:regionNET.Length
                regions(i).ZRange = [...
                    regionNET(i).ZRange.Start, ...
                    regionNET(i).ZRange.Stop ...
                    ];
                regions(i).RegionOP = [ ...
                    regionNET(i).RegionOP.Mua, ...
                    regionNET(i).RegionOP.Musp, ...
                    regionNET(i).RegionOP.G, ...
                    regionNET(i).RegionOP.N ...
                    ];
                regions(i).PhaseFunctionKey = ...
                    regionNET(i).PhaseFunctionKey; ... 
            end
            input.LayerRegions = regions;
        end
        
        function inputNET = ToInputNET(input)                
            regionsNET = NET.createArray('Vts.MonteCarlo.ITissueRegion', length(input.LayerRegions));
%             mapNET = NET.GenericClass('System.Collections.Generic.KeyValuePair','System.String',...
%                 'Vts.PhaseFunctionType'); 
%             mapListNET = NET.createGeneric('System.Collections.Generic.List',{mapNET},length(input.LayerRegions));
            map = input.RegionPhaseFunctionInputs;
            mapKeys = keys(map);
            mapValues = values(map);
            layerRegions = input.LayerRegions;
            for i=1:length(input.LayerRegions)
                zRange = layerRegions(i).ZRange;
                regionOP = layerRegions(i).RegionOP;
                regionKey = layerRegions(i).PhaseFunctionKey;
                % Note LayerTissueRegion knows only about the keys not the the values
                regionsNET(i) = Vts.MonteCarlo.Tissues.LayerTissueRegion(...
                    Vts.Common.DoubleRange( ...
                        zRange(1), ...
                        zRange(2) ...
                        ), ...
                    Vts.OpticalProperties( ...
                        regionOP(1), ...
                        regionOP(2), ...
                        regionOP(3), ...
                        regionOP(4) ...
                        ),...
                    regionKey...
                    );
            end
            RegionPhaseFunctionInputs = containers.Map(mapKeys, mapValues);
%             inputNET = Vts.MonteCarlo.Tissues.MultiLayerTissueInput(regionsNET);
            temp = Vts.MonteCarlo.Tissues.MultiLayerTissueInput(regionsNET);
%                 assignin(temp,'RegionPhaseFunctionInputs.Keys',mapKeys);
%                 assignin(temp,'RegionPhaseFunctionInputs.Values',mapValues);
            inputNET = temp;
            % at this point regionsNET(1).PhaseFunctionKey and inputNET.Regions(1).PhaseFunctionKey are set correctly
        end
    end
end