using System;
using System.Collections.Generic;
using NUnit.Framework;
using Vts.Common;
using Vts.IO;
using Vts.MonteCarlo;
using Vts.MonteCarlo.Detectors;
using Vts.MonteCarlo.RayData;
using Vts.MonteCarlo.Sources;
using Vts.MonteCarlo.Tissues;

namespace Vts.Test.MonteCarlo.RayData
{
    [TestFixture]
    public class RayDatabaseTests
    {
        private static SimulationInput _input;
        private static SimulationOutput _output;
        /// <summary>
        /// list of temporary files created by these unit tests
        /// </summary>
        readonly List<string> listOfTestGeneratedFiles = new List<string>()
        {
            "testraydatabase",
            "testraydatabase.txt",
            "RayDiffuseReflectanceDatabase", // name has no "test" prefix, it is generated by the code so name fixed
            "RayDiffuseReflectanceDatabase.txt",
            "file.txt", // file that captures output of MC simulation that usually goes to screen
        };

        /// <summary>
        /// Set up simulation specifying RayDatabase to be written
        /// </summary>
        [OneTimeSetUp]
        public void setup_simulation_input_components()
        {
            // delete previously generated files
            clear_folders_and_files();

            _input = new SimulationInput(
                100,
                "",
                new SimulationOptions(
                    0,
                    RandomNumberGeneratorType.MersenneTwister,
                    AbsorptionWeightingType.Continuous,
                    PhaseFunctionType.HenyeyGreenstein,
                    new List<DatabaseType>() { DatabaseType.RayDiffuseReflectance }, // SPECIFY DATABASE
                    false, // track statistics
                    0.0, // RR threshold -> 0 = no RR performed
                    1),
                new DirectionalPointSourceInput(
                    new Position(0.0, 0.0, 0.0),
                    new Direction(0.0, 0.0, 1.0),
                    1),
                new MultiLayerTissueInput(
                    new ITissueRegion[]
                    {
                            new LayerTissueRegion(
                                new DoubleRange(double.NegativeInfinity, 0.0),
                                new OpticalProperties(0.0, 1e-10, 0.0, 1.0)),
                            new LayerTissueRegion(
                                new DoubleRange(0.0, 20.0),
                                new OpticalProperties(0.01, 1.0, 0.8, 1.4)),
                            new LayerTissueRegion(
                                new DoubleRange(20.0, double.PositiveInfinity),
                                new OpticalProperties(0.0, 1e-10, 0.0, 1.0))
                    }),
                new List<IDetectorInput>()
                {
                    new ROfRhoAndTimeDetectorInput()
                    {
                        Rho = new DoubleRange(0.0, 10.0, 101),
                        Time = new DoubleRange(0.0, 1, 101)
                    }
                }              
            );
            _output = new MonteCarloSimulation(_input).Run();
        }

        /// <summary>
        /// clear all previously generated files.
        /// </summary>
        [OneTimeTearDown]
        public void clear_folders_and_files()
        {
            // delete any previously generated files
            foreach (var file in listOfTestGeneratedFiles)
            {
                FileIO.FileDelete(file);
            }
        }

        /// <summary>
        /// test to verify RayDatabaseWriter and RayDatabase.FromFile are working correctly.
        /// </summary>
        [Test]
        public void Validate_RayDatabase_Writer_and_FromFile_are_correct_when_using_WriteToFile()
        {
            string databaseFileName = "testraydatabase";
            var firstRayDP = new RayDataPoint(
                    new Position(1, 1, 0),
                    new Direction(0, 1 / Math.Sqrt(2), -1 / Math.Sqrt(2)),
                    1.0);
            var secondRayDP = new RayDataPoint(
                    new Position(2, 2, 0),
                    new Direction(1 / Math.Sqrt(2), 0, -1 / Math.Sqrt(2)),
                    2.0);
            using (var dbWriter = new RayDatabaseWriter(
                VirtualBoundaryType.DiffuseReflectance, databaseFileName))
            {       
                dbWriter.Write(firstRayDP);
                dbWriter.Write(secondRayDP);
            }
            // read back file written
            var rayDatabase = RayDatabase.FromFile(databaseFileName);
            Assert.AreEqual(2, rayDatabase.NumberOfElements);

            // manually enumerate through the first two elements (same as foreach)
            // PhotonDatabase is designed so you don't have to have the whole thing
            // in memory, so .ToArray() loses the benefits of the lazy-load data points
            var enumerator = rayDatabase.DataPoints.GetEnumerator();
            // advance to the first point and test that the point is valid
            enumerator.MoveNext();
            var dp1 = enumerator.Current;
            Assert.IsTrue(dp1.Position.X == firstRayDP.Position.X);
            Assert.IsTrue(dp1.Position.Y == firstRayDP.Position.Y);
            Assert.IsTrue(dp1.Position.Z == firstRayDP.Position.Z);
            Assert.IsTrue(dp1.Direction.Ux == firstRayDP.Direction.Ux);
            Assert.IsTrue(dp1.Direction.Uy == firstRayDP.Direction.Uy);
            Assert.IsTrue(dp1.Direction.Uz == firstRayDP.Direction.Uz);
            Assert.IsTrue(dp1.Weight == firstRayDP.Weight);
            // advance to the second point and test that the point is valid
            enumerator.MoveNext();
            var dp2 = enumerator.Current;
            Assert.IsTrue(dp2.Position.X == secondRayDP.Position.X);
            Assert.IsTrue(dp2.Position.Y == secondRayDP.Position.Y);
            Assert.IsTrue(dp2.Position.Z == secondRayDP.Position.Z);
            Assert.IsTrue(dp2.Direction.Ux == secondRayDP.Direction.Ux);
            Assert.IsTrue(dp2.Direction.Uy == secondRayDP.Direction.Uy);
            Assert.IsTrue(dp2.Direction.Uz == secondRayDP.Direction.Uz);
            Assert.IsTrue(dp2.Weight == secondRayDP.Weight);
        }

        /// <summary>
        /// Test to verify RayDiffuseReflectanceDatabase generated by MCCL simulation
        /// executed in OneTimeSetup is written and that it has the correct contents.
        /// </summary>
        [Test]
        public void Validate_database_file_gets_written_by_MCCL_and_is_correct()
        {
            Assert.IsTrue(FileIO.FileExists("RayDiffuseReflectanceDatabase"));
            // read the database from file, and verify the correct number of photons were written
            var rayDatabase = RayDatabase.FromFile("RayDiffuseReflectanceDatabase");

            Assert.AreEqual(88, rayDatabase.NumberOfElements);
            var enumerator = rayDatabase.DataPoints.GetEnumerator();
            // advance to the first point and test that the point is valid
            enumerator.MoveNext();
            var dp1 = enumerator.Current;
            Assert.AreEqual(0.0, dp1.Position.Z);
            Assert.IsTrue(Math.Abs(dp1.Weight - 0.021116) < 0.000001);
        }
    }
}