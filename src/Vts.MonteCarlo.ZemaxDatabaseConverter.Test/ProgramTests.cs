using NUnit.Framework;
using System.Collections.Generic;
using System;
using Vts.IO;
using Vts.Common;
using Vts.MonteCarlo.Sources;
using Vts.MonteCarlo.Tissues;
using Vts.MonteCarlo.Detectors;
using Vts.MonteCarlo.RayData;
using Vts.Zemax;

namespace Vts.MonteCarlo.ZemaxDatabaseConverter.Test
{
    [TestFixture]
    public class ProgramTests
    {
        /// This tests code that would be executed to convert ZRD DB to/from MCCL compatible DB
        private static SimulationInput _input;
        /// <summary>
        /// list of temporary files created by these unit tests
        /// </summary>
        readonly List<string> listOfTestGeneratedFiles = new List<string>()
        {
            "testzrdraydatabase1",
            "testzrdraydatabase1.txt",
            "testzrdraydatabase2",
            "testzrdraydatabase2.txt",
            "testmcclraydatabase",
            "testmcclraydatabase.txt",
            "RayDiffuseReflectanceDatabase", // name has no "test" prefix, it is generated by the code so name fixed
            "RayDiffuseReflectanceDatabase.txt",
         };

        /// <summary>
        /// Set up simulation specifying ZrdRayDatabase to be written
        /// </summary>
        [OneTimeSetUp]
        public void Setup_simulation_input_components()
        {
            // delete previously generated files
            Clear_folders_and_files();
            // set up a simulation to create a RayDiffuseReflectanceDB so Program can convert
            _input = new SimulationInput(
                100,
                "",
                new SimulationOptions(
                    0,
                    RandomNumberGeneratorType.MersenneTwister,
                    AbsorptionWeightingType.Continuous,
                    PhaseFunctionType.HenyeyGreenstein,
                    new List<DatabaseType>() { DatabaseType.RayDiffuseReflectance }, // SPECIFY DATABASE
                    false, // track statistics
                    0.0, // RR threshold -> 0 = no RR performed
                    1),
                new DirectionalPointSourceInput(
                    new Position(0.0, 0.0, 0.0),
                    new Direction(0.0, 0.0, 1.0),
                    1),
                new MultiLayerTissueInput(
                    new ITissueRegion[]
                    {
                            new LayerTissueRegion(
                                new DoubleRange(double.NegativeInfinity, 0.0),
                                new OpticalProperties(0.0, 1e-10, 0.0, 1.0)),
                            new LayerTissueRegion(
                                new DoubleRange(0.0, 20.0),
                                new OpticalProperties(0.01, 1.0, 0.8, 1.4)),
                            new LayerTissueRegion(
                                new DoubleRange(20.0, double.PositiveInfinity),
                                new OpticalProperties(0.0, 1e-10, 0.0, 1.0))
                    }),
                new List<IDetectorInput>()
                {
                    new ROfRhoAndTimeDetectorInput()
                    {
                        Rho = new DoubleRange(0.0, 10.0, 101),
                        Time = new DoubleRange(0.0, 1, 101)
                    }
                }
            );
            new MonteCarloSimulation(_input).Run();
        }

        /// <summary>
        /// clear all previously generated files.
        /// </summary>
        [OneTimeTearDown]
        public void Clear_folders_and_files()
        {
            // delete any previously generated files
            foreach (var file in listOfTestGeneratedFiles)
            {
                FileIO.FileDelete(file);
            }
        }
        /// <summary>
        /// Test to verify sanity check on input works correctly
        /// </summary>
        [Test]
        public void Validate_VerifyInputs_method_returns_correct_values()
        {
            Clear_folders_and_files();

            // the following will fail because only 1 argument and file does not exist
            string[] arguments = new string[] { "infile=databaseToConvert" };
            var status = Program.Main(arguments);
            Assert.IsTrue(status == 0);
            // the following will be successful because 1st argument is file that gets
            // generated in OneTimeSetup
            arguments = new string[] { "infile=RayDiffuseReflectanceDatabase", "outfile=testzrdraydatabase1" };
            status = Program.Main(arguments);
            Assert.IsTrue(status == 1);
        }
        /// <summary>
        /// Test that uses app to convert RayDatabase written in OneTimeSetup to a Zemax ZRD ray database
        /// Validation values used from prior test
        /// </summary>
        [Test]
        public void Validate_conversion_from_MCCL_RayDatabase_to_Zemax_ZrdDatabase_successful()
        {
            // run database converter on MCCL Ray Database generated in OneTimeSetup
            var arguments = new string[] { "infile=RayDiffuseReflectanceDatabase", "outfile=testzrdraydatabase2" };
            Program.Main(arguments);
            // read file written
            var rayDatabase = ZrdRayDatabase.FromFile("testzrdraydatabase2");
            Assert.AreEqual(88, rayDatabase.NumberOfElements);

            // manually enumerate through the first element
            var enumerator = rayDatabase.DataPoints.GetEnumerator();
            // advance to the first point and test that the point is valid
            enumerator.MoveNext();
            var dp1 = enumerator.Current;
            Assert.IsTrue(Math.Abs(dp1.X - 4.189113) < 1e-5);
            Assert.IsTrue(Math.Abs(dp1.Y + 22.1217) < 1e-4);
            Assert.IsTrue(Math.Abs(dp1.Z - 0.0) < 1e-6);
            Assert.IsTrue(Math.Abs(dp1.Ux - 0.654227) < 1e-6);
            Assert.IsTrue(Math.Abs(dp1.Uy - 0.223239) < 1e-6);
            Assert.IsTrue(Math.Abs(dp1.Uz + 0.722600) < 1e-6);
            Assert.IsTrue(Math.Abs(dp1.Weight - 0.021116) < 1e-6);
            // advance to the second point and test that the point is valid
            enumerator.MoveNext();
            var dp2 = enumerator.Current;
            Assert.IsTrue(Math.Abs(dp2.X - 0.382333) < 1e-6);
            Assert.IsTrue(Math.Abs(dp2.Y + 2.13952) < 1e-5);
            Assert.IsTrue(Math.Abs(dp2.Z - 0.0) < 1e-6);
            Assert.IsTrue(Math.Abs(dp2.Ux + 0.711575) < 1e-6);
            Assert.IsTrue(Math.Abs(dp2.Uy + 0.493464) < 1e-6);
            Assert.IsTrue(Math.Abs(dp2.Uz + 0.500153) < 1e-6);
            Assert.IsTrue(Math.Abs(dp2.Weight - 0.911520) < 1e-6);
            enumerator.Dispose();
        }
        /// <summary>
        /// test to verify reading actual Zemax ZRD file, files are about 389KB LM: can I put in resources?
        /// </summary>
        [Test]
        public void Validate_conversion_from_Zemax_ZrdDatabase_to_MCCL_RayDatabase_successful()
        {
            //var databaseFilename = @"C:\Users\hayakawa\Desktop\RP\Zemax\MyOutput\ZRDDiffuseReflectanceDatabase";
            var arguments = new string[] { "infile=ZRDTest", "infiletype=zrd","outfile=testmcclraydatabase" };
            Program.Main(arguments);// read the database from file, and verify the correct number of photons were written
            var rayDatabase = RayDatabase.FromFile("testmcclraydatabase");
            Assert.AreEqual(948, rayDatabase.NumberOfElements);
            var enumerator = rayDatabase.DataPoints.GetEnumerator();
            // advance to the first point and test that the point is valid
            enumerator.MoveNext();
            var dp1 = enumerator.Current;
            Assert.IsTrue(Math.Abs(dp1.Position.X - 2.04889) < 1e-5);
            Assert.IsTrue(Math.Abs(dp1.Position.Y - 3.35319) < 1e5);
            Assert.IsTrue(Math.Abs(dp1.Position.Z - 0.0) < 1e-6);
            Assert.IsTrue(Math.Abs(dp1.Direction.Ux + 0.627379) < 1e-6);
            Assert.IsTrue(Math.Abs(dp1.Direction.Uy - 0.177843) < 1e-6);
            Assert.IsTrue(Math.Abs(dp1.Direction.Uz + 0.758133) < 1e-6); // why is this neg?
            Assert.IsTrue(Math.Abs(dp1.Weight - 0.768176) < 1e-6);
            enumerator.Dispose();
        }


    }
}
